// <auto-generated />
using System;
using FA_DB.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FA_DB.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230428114722_UserWeight")]
    partial class UserWeight
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FA_DB.Models.FavoriteTraningPrograms", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Email");

                    b.ToTable("favoriteTraningPrograms");
                });

            modelBuilder.Entity("FA_DB.Models.Server", b =>
                {
                    b.Property<int>("ServerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServerID"));

                    b.HasKey("ServerID");

                    b.ToTable("server");
                });

            modelBuilder.Entity("FA_DB.Models.TraningData", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Email");

                    b.ToTable("traningData");
                });

            modelBuilder.Entity("FA_DB.Models.TraningProgram", b =>
                {
                    b.Property<int>("TraningProgramID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TraningProgramID"));

                    b.Property<string>("FavoriteTraningProgramsEmail")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ServerID")
                        .HasColumnType("int");

                    b.HasKey("TraningProgramID");

                    b.HasIndex("FavoriteTraningProgramsEmail");

                    b.HasIndex("ServerID");

                    b.ToTable("traningPrograms");
                });

            modelBuilder.Entity("FA_DB.Models.TraningTypes.BikeSession", b =>
                {
                    b.Property<int>("SessionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SessionID"));

                    b.Property<float>("AvgSpeed")
                        .HasColumnType("real");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<float>("Distance")
                        .HasColumnType("real");

                    b.Property<float>("Durration")
                        .HasColumnType("real");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("traningDataEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SessionID");

                    b.HasIndex("traningDataEmail");

                    b.ToTable("bikeSessions");
                });

            modelBuilder.Entity("FA_DB.Models.TraningTypes.RunningSession", b =>
                {
                    b.Property<int>("SessionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SessionID"));

                    b.Property<float>("AvgSpeed")
                        .HasColumnType("real");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<float>("Distance")
                        .HasColumnType("real");

                    b.Property<float>("Durration")
                        .HasColumnType("real");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("traningDataEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SessionID");

                    b.HasIndex("traningDataEmail");

                    b.ToTable("runningSessions");
                });

            modelBuilder.Entity("FA_DB.Models.User", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("ServerID")
                        .HasColumnType("int");

                    b.HasKey("Email");

                    b.HasIndex("ServerID");

                    b.ToTable("users");
                });

            modelBuilder.Entity("FA_DB.Models.UserData", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DoB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Height")
                        .HasColumnType("real");

                    b.HasKey("Email");

                    b.ToTable("userDatas");
                });

            modelBuilder.Entity("FA_DB.Models.UserWeight", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("UserDataEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("UserDataEmail");

                    b.ToTable("UserWeights");
                });

            modelBuilder.Entity("FA_DB.Models.FavoriteTraningPrograms", b =>
                {
                    b.HasOne("FA_DB.Models.User", "User")
                        .WithOne("FavoriteTraningPrograms")
                        .HasForeignKey("FA_DB.Models.FavoriteTraningPrograms", "Email")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FA_DB.Models.TraningData", b =>
                {
                    b.HasOne("FA_DB.Models.User", "User")
                        .WithOne("TraningData")
                        .HasForeignKey("FA_DB.Models.TraningData", "Email")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FA_DB.Models.TraningProgram", b =>
                {
                    b.HasOne("FA_DB.Models.FavoriteTraningPrograms", null)
                        .WithMany("TraningPrograms")
                        .HasForeignKey("FavoriteTraningProgramsEmail");

                    b.HasOne("FA_DB.Models.Server", null)
                        .WithMany("TraningPrograms")
                        .HasForeignKey("ServerID");
                });

            modelBuilder.Entity("FA_DB.Models.TraningTypes.BikeSession", b =>
                {
                    b.HasOne("FA_DB.Models.TraningData", "traningData")
                        .WithMany("BikeSessions")
                        .HasForeignKey("traningDataEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("traningData");
                });

            modelBuilder.Entity("FA_DB.Models.TraningTypes.RunningSession", b =>
                {
                    b.HasOne("FA_DB.Models.TraningData", "traningData")
                        .WithMany("RunningSessions")
                        .HasForeignKey("traningDataEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("traningData");
                });

            modelBuilder.Entity("FA_DB.Models.User", b =>
                {
                    b.HasOne("FA_DB.Models.Server", null)
                        .WithMany("Users")
                        .HasForeignKey("ServerID");
                });

            modelBuilder.Entity("FA_DB.Models.UserData", b =>
                {
                    b.HasOne("FA_DB.Models.User", "User")
                        .WithOne("UserData")
                        .HasForeignKey("FA_DB.Models.UserData", "Email")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FA_DB.Models.UserWeight", b =>
                {
                    b.HasOne("FA_DB.Models.UserData", "UserData")
                        .WithMany("UserWeights")
                        .HasForeignKey("UserDataEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserData");
                });

            modelBuilder.Entity("FA_DB.Models.FavoriteTraningPrograms", b =>
                {
                    b.Navigation("TraningPrograms");
                });

            modelBuilder.Entity("FA_DB.Models.Server", b =>
                {
                    b.Navigation("TraningPrograms");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("FA_DB.Models.TraningData", b =>
                {
                    b.Navigation("BikeSessions");

                    b.Navigation("RunningSessions");
                });

            modelBuilder.Entity("FA_DB.Models.User", b =>
                {
                    b.Navigation("FavoriteTraningPrograms")
                        .IsRequired();

                    b.Navigation("TraningData")
                        .IsRequired();

                    b.Navigation("UserData")
                        .IsRequired();
                });

            modelBuilder.Entity("FA_DB.Models.UserData", b =>
                {
                    b.Navigation("UserWeights");
                });
#pragma warning restore 612, 618
        }
    }
}
